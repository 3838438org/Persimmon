#:import SVC sklearn.svm.SVC
#:import RandomForestClassifier sklearn.ensemble.RandomForestClassifier
#:import KNeighborsClassifier sklearn.neighbors.KNeighborsClassifier
#:import KFold sklearn.model_selection.KFold
#:import StratifiedKFold sklearn.model_selection.StratifiedKFold
#:import LeaveOneOut sklearn.model_selection.LeaveOneOut


PrototypeScreen:

<PrototypeScreen>:
	orientation: 'horizontal'
	spacing: '15dp'
	padding: '15dp'
	BoxLayout:
		orientation: 'vertical'
		spacing: '15dp'
		BoxLayout:
			orientation: 'vertical'
			spacing: '5dp'
			TextInput:
				text: root.train_file
				size_hint_y: None
				height: '30dp'
				multiline: False
				# This is very very bad
				#on_focus: root.load_popup('train_file')
			Button
				text: 'Load File'
				size_hint_y: None
				height: '30dp'
				on_release: root.load_popup('train_file')
			Widget:
		ToggleButton:
			text: 'SVM'
			group: 'estimators'
			state: 'down'
			on_release: app.estimator = SVC()
		ToggleButton:
			text: 'K Nearest Neighbors'
			group: 'estimators'
			on_release: app.estimator = KNeighborsClassifier()
		ToggleButton:
			text: 'Random Forest'
			group: 'estimators'
			on_release: app.estimator = RandomForestClassifier()
	BoxLayout:
		orientation: 'vertical'
		spacing: '15dp'
		ToggleButton:
			text: 'Leave one out'
			group: 'cv'
			state: 'down'
			on_release: app.cv = LeaveOneOut()
		ToggleButton:
			text: '50/50 split'
			group: 'cv'
			on_release: app.cv = KFold(n_splits=2)
		ToggleButton:
			text: '3-folds'
			group: 'cv'
			on_release: app.cv = None
		ToggleButton:
			text: '10-folds (Stratified)'
			group: 'cv'
			on_release: app.cv = StratifiedKFold(n_splits=10)
	BoxLayout:
		orientation: 'vertical'
		spacing: '15dp'
		Button:
			text: 'Validate'
			size_hint_y: 25
			on_release: root.validate()
		TextInput:
			text: root.result
			size_hint_y: 50
			readonly: True
		BoxLayout:
			orientation: 'vertical'
			size_hint_y: 25
			spacing: '5dp'
			Widget:
			Button:
				text: 'Predict'
				size_hint_y: None
				height: '30dp'
				on_release: root.predict()
			TextInput:
				text: root.predict_file
				size_hint_y: None
				height: '30dp'
				multiline: False
				#on_focus: root.load_popup('predict_file')
			Button:
				text: 'Load Predict File'
				size_hint_y: None
				height: '30dp'
				on_release: root.load_popup('predict_file')

<FileDialog>: # A file chooser dialog (Popup)
	# This is the file selected by the user, this is what we care about
	selected_file: file_chooser.selection and file_chooser.selection[0] or ''
	load_button: load_button
	file_chooser: file_chooser
	BoxLayout:
		#pos: root.pos
		orientation: 'vertical'
		FileChooserIconView:
			id: file_chooser
			on_selection: root.toggle_load_button(self.selection)
			on_submit: root.dismiss()
		TextInput:
			text: root.selected_file
			size_hint_y: None
			height: '30dp'
			multiline: False
		BoxLayout:
			orientation: 'horizontal'
			size_hint_y: None
			height: '30dp'
			Button:
				text: 'Cancel'
				on_release: root.dismiss()
			Button:
				id: load_button
				# Load button is disabled by default, we enable when a suitable
				# file is selected
				disabled: True
				text: 'Load'
				on_release: root.dismiss()

